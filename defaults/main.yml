---
# defaults file for errbot

project: errbot

errbot_root: /opt/errbot
errbot_user: "{{ ansible_user_id }}"
errbot_user_group: "{{ ansible_user_id }}"
errbot_exec: "{{ virtualenv }}/bin/errbot"
errbot_extra_deps: []

# Debug backends to test your plugins manually:
# 'Text'     - on the text console
# 'Graphic'  - in a GUI window

# Commercial backends:
# 'Campfire' - see https://campfirenow.com/ (follow instructions from https://github.com/errbotio/err-backend-campfire)
# 'Hipchat'  - see https://www.hipchat.com/
# 'Slack'    - see https://slack.com/
# 'Gitter'   - see https://gitter.im/ (follow instructions from https://github.com/errbotio/err-backend-gitter)

# Open protocols:
# 'TOX'      - see https://tox.im/ (follow instructions from https://github.com/errbotio/err-backend-tox)
# 'IRC'      - for classic IRC or bridged services like https://gitter.im
# 'XMPP'     - the Extensible Messaging and Presence Protocol (https://xmpp.org/)
# 'Telegram' - cloud-based mobile and desktop messaging app with a focus
#              on security and speed. (https://telegram.org/)

errbot_backend: XMPP

errbot_storage: Shelf  # defaults to filestorage (python shelf).

errbot_bot_extra_storage_plugins_dir: no  # extra search path to find custom storage plugins

# The location where all of Err's data should be stored. Make sure to set
# this to a directory that is writable by the user running the bot.
errbot_bot_data_dir: /var/lib/err

### Repos and plugins config.

# Set this to change from where errbot gets its installable plugin list.
# By default it gets the index from errbot.io which is a file generated by tools/plugin-gen.py.
errbot_bot_plugin_indexes: http://version.errbot.io/repos.json
#
# You can also specify a local file:
# errbot_bot_plugin_indexes: tools/repos.json
#
# Or a list. note: if some plugins exists in 2 lists, only the first hit will be taken into account.
# errbot_bot_plugin_indexes: "('/data/repos.json', 'https://my.private.tld/errbot/myrepos.json')"

# Set this to a directory on your system where you want to load extra
# plugins from, which is useful mostly if you want to develop a plugin
# locally before publishing it. Note that you can specify only a single
# directory, however you are free to create subdirectories with multiple
# plugins inside this directory.
errbot_bot_extra_plugin_dir: no

# If you use an external backend as a plugin,
# this is where you tell Errbot where to find it.
errbot_bot_extra_backend_dir: /opt/errbackends

errbot_directories:
  - "{{ errbot_root }}"
  - "{{ errbot_bot_data_dir }}"
  - "{{ errbot_bot_extra_backend_dir }}"

# If you want only a subset of the core plugins that are bundled with errbot, you can specify them here.
errbot_core_plugins: no # This is default, all core plugins.
# For example CORE_PLUGINS = ('ACLs', 'Backup', 'Help') you get those names from the .plug files Name entry.
# For absolutely no plug: CORE_PLUGINS = ()

# Defines an order in which the plugins are getting their callbacks. Useful if you want to have plugins do
# pre- or post-processing on messages.
# The 'None' tuple entry represents all the plugins that aren't to be expicitely ordered. For example, if
# you want 'A' to run first, then everything else but 'B', then 'B', you would use ('A', None, 'B').
errbot_plugins_callback_order: []

# Should plugin dependencies be installed automatically? If this is true
# then Errbot will use pip to install any missing dependencies automatically.
#
# If you have installed Errbot in a virtualenv, this will run the equivalent
# of `pip install -r requirements.txt`.
# If no virtualenv is detected, the equivalent of `pip install --user -r
# requirements.txt` is used to ensure the package(s) is/are only installed for
# the user running Err.
errbot_autoinstall_deps: yes

# The location of the log file. If you set this to None, then logging will
# happen to console only.
errbot_bot_log_file: BOT_DATA_DIR + '/err.log'

# The verbosity level of logging that is done to the above logfile, and to
# the console. This takes the standard Python logging levels, DEBUG, INFO,
# WARN, ERROR. For more info, see http://docs.python.org/library/logging.html
#
# If you encounter any issues with Err, please set your log level to
# logging.DEBUG and attach a log with your bug report to aid the developers
# in debugging the issue.
errbot_bot_log_level: logging.INFO

# Enable logging to sentry (find out more about sentry at www.getsentry.com).
# This is optional and disabled by default.
errbot_bot_log_sentry: no
errbot_sentry_dsn: no
errbot_sentry_loglevel: BOT_LOG_LEVEL

# Execute commands in asynchronous mode. In this mode, Errbot will spawn 10
# separate threads to handle commands, instead of blocking on each
# single command.
errbot_bot_async: yes

# Size of the thread pool for the asynchronous mode.
errbot_bot_async_poolsize: 10

##########################################################################
# Account and chatroom (MUC) configuration                               #
##########################################################################

# The identity, or credentials, used to connect to a server
errbot_identity_user: err@localhost
errbot_identity_password: changeme
errbot_identity_server: "('host.domain.tld',5222)"
errbot_identity_token: ed4b74d62833267d98aa99f312ff04
errbot_identity_endpoint: https://api.hipchat.com
errbot_identity_nickname: err-chatbot
errbot_identity_username: err-chatbot    # optional, defaults to nickname if omitted
errbot_identity_port: 6667                  # optional
errbot_identity_ssl: False                  # optional
errbot_identity_ipv6: False                 # optional
errbot_identity_nickserv_password: None     # optional
## Optional: Specify an IP address or hostname (vhost), and a
## port, to use when making the connection. Leave port at 0
## if you have no source port preference.
##    example: 'bind_address': ('my-errbot.io', 0)
errbot_identity_bind_address: "(localhost', 0)"


# Set the admins of your bot. Only these users will have access
# to the admin-only commands.
#
# Unix-style glob patterns are supported, so 'gbin@localhost'
# would be considered an admin if setting '*@localhost'.
errbot_bot_admins:
  - "{{ ansible_user_id }}@localhost"

# Chatrooms your bot should join on startup. For the IRC backend you
# should include the # sign here. For XMPP rooms that are password
# protected, you can specify another tuple here instead of a string,
# using the format (RoomName, Password).
errbot_chatroom_presence:
  - err@conference.server.tld

# The FullName, or nickname, your bot should use. What you set here will
# be the nickname that Errbot shows in chatrooms. Note that some XMPP
# implementations, notably HipChat, are very picky about what name you
# use. In the case of HipChat, make sure this matches exactly with the
# name you gave the user.
errbot_chatroom_fn: Errbot

##########################################################################
# Prefix configuration                                                   #
##########################################################################

# Command prefix, the prefix that is expected in front of commands directed
# at the bot.
#
# Note: When writing plugins,you should always use the default '!'.
# If the prefix is changed from the default, the help strings will be
# automatically adjusted for you.
#
errbot_bot_prefix: "!"
#
# Uncomment the following and set it to True if you want the prefix to be
# optional for normal chat.
# (Meaning messages sent directly to the bot as opposed to within a MUC)
errbot_bot_prefix_optional_on_chat: no

# You might wish to have your bot respond by being called with certain
# names, rather than the BOT_PREFIX above. This option allows you to
# specify alternative prefixes the bot will respond to in addition to
# the prefix above.
errbot_bot_alt_prefixes:
  - Err

# If you use alternative prefixes, you might want to allow users to insert
# separators like , and ; between the prefix and the command itself. This
# allows users to refer to your bot like this (Assuming 'Err' is in your
# BOT_ALT_PREFIXES):
# "Err, status" or "Err: status"
#
# Note: There's no need to add spaces to the separators here
#
errbot_bot_alt_prefix_separators:
  - ':'
  - ','
  - ';'

# Continuing on this theme, you might want to permit your users to be
# lazy and not require correct capitalization, so they can do 'Err',
# 'err' or even 'ERR'.
errbot_bot_alt_prefix_caseinsensitive: yes

##########################################################################
# Access controls and message diversion                                  #
##########################################################################

# Access controls, allowing commands to be restricted to specific users/rooms.
# Available filters (you can omit a filter or set it to None to disable it):
#   allowusers: Allow command from these users only
#   denyusers: Deny command from these users
#   allowrooms: Allow command only in these rooms (and direct messages)
#   denyrooms: Deny command in these rooms
#   allowprivate: Allow command from direct messages to the bot
#   allowmuc: Allow command inside rooms
# Rules listed in ACCESS_CONTROLS_DEFAULT are applied by default and merged
# with any commands found in ACCESS_CONTROLS.
#
# The options allowusers, denyusers, allowrooms and denyrooms support
# unix-style globbing similar to BOT_ADMINS.
#
# Command names also support unix-style globs and can optionally be restricted
# to a specific plugin by prefixing the command with the name of a plugin,
# separated by a colon. For example, `Health:status` will match the `!status`
# command of the `Health` plugin and `Health:*` will match all commands defined
# by the `Health` plugin.
#
# Please note that the first command match found will be used so if you have
# overlapping patterns you must used an OrderedDict instead of a regular dict:
# https://docs.python.org/3.4/library/collections.html#collections.OrderedDict
#
# Example:
#
errbot_access_controls_default: {} # Allow everyone access by default
errbot_access_controls: {}

# Uncomment and set this to True to hide the restricted commands from
# the help output.
errbot_hide_restricted_commands: no

# Uncomment and set this to True to ignore commands from users that have no
# access for these instead of replying with error message.
errbot_hide_restricted_access: no

# A list of commands which should be responded to in private, even if
# the command was given in a MUC. For example:
# DIVERT_TO_PRIVATE = ('help', 'about', 'status')
errbot_divert_to_private: []

# Chat relay
# Can be used to relay one to one message from specific users to the bot
# to MUCs. This can be useful with XMPP notifiers like for example  the
# standard Altassian Jira which don't have native support for MUC.
# For example: CHATROOM_RELAY = {'gbin@localhost' : (_TEST_ROOM,)}
errbot_chatroom_relay: {}

# Reverse chat relay
# This feature forwards whatever is said to a specific user.
# It can be useful if you client like gtalk doesn't support MUC correctly
# For example: REVERSE_CHATROOM_RELAY = {_TEST_ROOM : ('gbin@localhost',)}
errbot_reverse_chatroom_relay: {}

##########################################################################
# Miscellaneous configuration options                                    #
##########################################################################

# Define the maximum length a single message may be. If a plugin tries to
# send a message longer than this length, it will be broken up into multiple
# shorter messages that do fit.
errbot_message_size_limit: 10000

# XMPP TLS certificate verification. In order to validate offered certificates,
# you must supply a path to a file containing certificate authorities. By
# default, "/etc/ssl/certs/ca-certificates.crt" is used, which on most Linux
# systems holds the default system trusted CA certificates. You might need to
# change this depending on your environment. Setting this to None disables
# certificate validation, which can be useful if you have a self-signed
# certificate for example.
errbot_xmpp_ca_cert_file: /etc/ssl/certs/ca-certificates.crt

# Influence the security methods used on connection with XMPP-based
# backends. You can use this to work around authentication issues with
# some buggy XMPP servers.
#
# The default is to try anything:
errbot_xmpp_feature_mechanisms: {}

# Modify the default keep-alive interval. By default, Errbot will send
# some whitespace to the XMPP server every 300 seconds to keep the TCP
# connection alive. On some servers, or when running Errbot from behind
# a NAT router, the default might not be fast enough and you will need
# to set it to a lower value.
#
# It has been reported that HipChat also times out without setting this
# to a lower value (60 seems to work well with HipChat)
#
# If you're having issues with your bot getting constantly disconnected,
# try to gradually lower this value until it no longer happens.
errbot_xmpp_keepalive_interval: 300


# XMPP supports some formatting with XEP-0071 (http://www.xmpp.org/extensions/xep-0071.html).
# It is disabled by default because XMPP clients support has been found to be spotty.
# Switch it to True to enable XHTML-IM formatting.
errbot_xmpp_xhtml_im: no

# Message rate limiting for the IRC backend. This will delay subsequent
# messages by this many seconds (floats are supported). Setting these
# to a value of 0 effectively disables rate limiting.
errbot_irc_channel_rate: 1  # Regular channel messages
errbot_irc_private_rate: 1  # Private messages
errbot_irc_reconnect_on_kick: 5  # Reconnect back to a channel after a kick (in seconds)
                            # Put it at None if you don't want the chat to
                            # reconnect
errbot_irc_reconnect_on_disconnect: 5  # Reconnect back to a channel after a disconenction (in seconds)

# The pattern to build a user representation from for ACL matches.
# The default is "{nick}!{user}@{host}" which results in "zoni!zoni@ams1.groenen.me"
# for the user zoni connecting from ams1.groenen.me.
# Available substitution variables:
#   {nick}  ->  The nickname of the user
#   {user}  ->  The username of the user
#   {host}  ->  The hostname the user is connecting from
errbot_irc_acl_pattern: "{nick}!{user}@{host}"

# Allow messages sent in a chatroom to be directed at requester.
errbot_groupchat_nick_prefixed: no

# Disable table borders, making output more compact (supported only on IRC, Slack and Telegram currently).
errbot_compact_output: yes

# Disables the logging output in Text mode and only outputs Ansi.
errbot_text_demo_mode: no

# Prevent ErrBot from saying anything if the command is unrecognized.
errbot_suppress_cmd_not_found: no
